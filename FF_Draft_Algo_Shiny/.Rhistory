players_avail <- players_avail %>% filter(!Pos %in% pos_filled)
}
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- full_join(sim_my_drafted, slice(pick_values,1))
print(arrange(sim_my_drafted, pick))
set_envir <- function(){
library(data.table)
library(dplyr)
}
set_envir()
load_projections <- function(){
cols <- c('Player', 'Pos', 'Points', 'Floor', 'Ceiling', 'ADP')
ffa <- fread("/Users/nickvarberg/Downloads/FFA_projections - Sheet1.csv", col.names=cols)
# Create draft position DP variable
ffa <- ffa %>% arrange(ADP) %>% tibble::rowid_to_column("DP")
ffa <- ffa %>% group_by(Pos) %>% arrange(DP) %>%
mutate(posrank=order(DP)) %>% ungroup()
}
ffa <- load_projections()
draft_attributes <- function(){
#Attributes of snake draft
positions        <- c(2, 3, 3, 1)
names(positions) <- c('QB', 'RB', 'WR', 'TE')
assign('positions', positions, envir=.GlobalEnv)
assign('PICKS_PER_ROUND', 8, envir=.GlobalEnv)
assign('MY_PICKS', c(3,14,19,30,35,46,51,62,67), envir=.GlobalEnv)
}
draft_attributes()
calculate_parp <- function(projections){
# My last pick is the replacement level pick
REPL_PICK        <- tail(MY_PICKS,1)
# Replaceent points are max points you could get at that position in the last round
RB_REPL_POINTS <- max(filter(ffa, Pos=='RB' & DP >= REPL_PICK)$Points)
QB_REPL_POINTS <- max(filter(ffa, Pos=='QB' & DP >= REPL_PICK)$Points)
WR_REPL_POINTS <- max(filter(ffa, Pos=='WR' & DP >= REPL_PICK)$Points)
TE_REPL_POINTS <- max(filter(ffa, Pos=='TE' & DP >= REPL_PICK)$Points)
projections    <- mutate(ffa, points_arp = ifelse(Pos=='RB', Points-RB_REPL_POINTS,
ifelse(Pos=='QB', Points-QB_REPL_POINTS,
ifelse(Pos=='WR', Points-WR_REPL_POINTS,
ifelse(Pos=='TE', Points-TE_REPL_POINTS, 0)
))))
return(projections)
}
projections <- calculate_parp(ffa)
my_drafted <- NULL
others_drafted <- NULL
get_picks_remain <- function(my_picks, my_drafted){
if(is.null(my_drafted)){ return(my_picks)
} else{ return(setdiff(my_picks, my_drafted$pick))}
}
get_players_avail <- function(projections, my_drafted, others_drafted){
if(is.null(my_drafted)){ players_avail <- projections
} else{
players_avail <- projections %>% filter(!Player %in% my_drafted$Player)
}
if(is.null(others_drafted)){ players_avail <- players_avail
} else{
players_avail <- players_avail %>% filter(!Player %in% others_drafted$Player)
}
}
get_pick_values <- function(players_avail, my_picks_remain){
for (pick in my_picks_remain){
# Filter to plyers in the next 2 rounds after pick
df <- players_avail %>%
filter(DP>=pick & DP <= pick+2*PICKS_PER_ROUND) %>%
group_by(Pos) %>%
filter(points_arp == max(points_arp)) %>%
mutate(pick = pick) %>%
arrange(desc(points_arp)) %>%
ungroup() %>%
mutate(value = (points_arp - round(mean(points_arp),2))) %>%
select('pick', 'Player', 'Pos', 'Points', 'points_arp', 'DP', 'value')
if (pick == my_picks_remain[1]){
pick_values <- df
}
else{
pick_values <- full_join(pick_values, df)
}
}
return(arrange(pick_values, desc(value)))
}
get_pos_filled <- function(all_drafted){
df             <- all_drafted %>% group_by(Pos) %>% summarise(n = n())
num_pos        <- df %>% pull(n)
names(num_pos) <- df %>% pull(Pos)
pos_filled     <- c()
for (pos in names(num_pos)){
if (num_pos[pos] == positions[pos]){
pos_filled <- c(pos_filled, pos)
}
}
return(pos_filled)
}
sim_my_draft <- function(projections, my_picks_remain){
# Initialize variables and select first choice
my_picks_remain <- get_picks_remain(MY_PICKS, my_drafted)
players_avail <- get_players_avail(projections, my_drafted, others_drafted)
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- slice(pick_values, 1)
# Draft rest of round
while (nrow(sim_my_drafted) < nrow(my_picks_remain)){
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
if(is.null(my_drafted)){all_drafted <- sim_my_drafted
} else{all_drafted <- full_join(my_drafted, sim_my_drafted, by='Player')}
players_avail  <- players_avail %>% filter(!Player %in% all_drafted$Player)
pos_filled     <- get_pos_filled(all_drafted)
if(!is.null(pos_filled)){
players_avail <- players_avail %>% filter(!Pos %in% pos_filled)
}
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- full_join(sim_my_drafted, slice(pick_values,1))
}
print(arrange(sim_my_drafted, pick))
}
sim_my_draft(projections, my_picks_remain)
nrow(sim_my_draft())
nrow(sim_my_drafted)
sim_my_draft <- function(projections, my_picks_remain){
# Initialize variables and select first choice
my_picks_remain <- get_picks_remain(MY_PICKS, my_drafted)
players_avail <- get_players_avail(projections, my_drafted, others_drafted)
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- slice(pick_values, 1)
# Draft rest of round
while (length(my_picks_remain) > 0){
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
if(is.null(my_drafted)){all_drafted <- sim_my_drafted
} else{all_drafted <- full_join(my_drafted, sim_my_drafted, by='Player')}
players_avail  <- players_avail %>% filter(!Player %in% all_drafted$Player)
pos_filled     <- get_pos_filled(all_drafted)
if(!is.null(pos_filled)){
players_avail <- players_avail %>% filter(!Pos %in% pos_filled)
}
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- full_join(sim_my_drafted, slice(pick_values,1))
}
print(arrange(sim_my_drafted, pick))
}
sim_my_draft(projections, my_picks_remain)
my_picks_remain <- get_picks_remain(MY_PICKS, my_drafted)
players_avail <- get_players_avail(projections, my_drafted, others_drafted)
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- slice(pick_values, 1)
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
if(is.null(my_drafted)){all_drafted <- sim_my_drafted
} else{all_drafted <- full_join(my_drafted, sim_my_drafted, by='Player')}
players_avail  <- players_avail %>% filter(!Player %in% all_drafted$Player)
pos_filled     <- get_pos_filled(all_drafted)
if(!is.null(pos_filled)){
players_avail <- players_avail %>% filter(!Pos %in% pos_filled)
}
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- full_join(sim_my_drafted, slice(pick_values,1))
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
if(is.null(my_drafted)){all_drafted <- sim_my_drafted
} else{all_drafted <- full_join(my_drafted, sim_my_drafted, by='Player')}
players_avail  <- players_avail %>% filter(!Player %in% all_drafted$Player)
pos_filled     <- get_pos_filled(all_drafted)
if(!is.null(pos_filled)){
players_avail <- players_avail %>% filter(!Pos %in% pos_filled)
}
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- full_join(sim_my_drafted, slice(pick_values,1))
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
if(is.null(my_drafted)){all_drafted <- sim_my_drafted
} else{all_drafted <- full_join(my_drafted, sim_my_drafted, by='Player')}
players_avail  <- players_avail %>% filter(!Player %in% all_drafted$Player)
pos_filled     <- get_pos_filled(all_drafted)
if(!is.null(pos_filled)){
players_avail <- players_avail %>% filter(!Pos %in% pos_filled)
}
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- full_join(sim_my_drafted, slice(pick_values,1))
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
if(is.null(my_drafted)){all_drafted <- sim_my_drafted
} else{all_drafted <- full_join(my_drafted, sim_my_drafted, by='Player')}
players_avail  <- players_avail %>% filter(!Player %in% all_drafted$Player)
pos_filled     <- get_pos_filled(all_drafted)
if(!is.null(pos_filled)){
players_avail <- players_avail %>% filter(!Pos %in% pos_filled)
}
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- full_join(sim_my_drafted, slice(pick_values,1))
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
if(is.null(my_drafted)){all_drafted <- sim_my_drafted
} else{all_drafted <- full_join(my_drafted, sim_my_drafted, by='Player')}
players_avail  <- players_avail %>% filter(!Player %in% all_drafted$Player)
pos_filled     <- get_pos_filled(all_drafted)
if(!is.null(pos_filled)){
players_avail <- players_avail %>% filter(!Pos %in% pos_filled)
}
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- full_join(sim_my_drafted, slice(pick_values,1))
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
if(is.null(my_drafted)){all_drafted <- sim_my_drafted
} else{all_drafted <- full_join(my_drafted, sim_my_drafted, by='Player')}
players_avail  <- players_avail %>% filter(!Player %in% all_drafted$Player)
pos_filled     <- get_pos_filled(all_drafted)
if(!is.null(pos_filled)){
players_avail <- players_avail %>% filter(!Pos %in% pos_filled)
}
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- full_join(sim_my_drafted, slice(pick_values,1))
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
if(is.null(my_drafted)){all_drafted <- sim_my_drafted
} else{all_drafted <- full_join(my_drafted, sim_my_drafted, by='Player')}
players_avail  <- players_avail %>% filter(!Player %in% all_drafted$Player)
pos_filled     <- get_pos_filled(all_drafted)
if(!is.null(pos_filled)){
players_avail <- players_avail %>% filter(!Pos %in% pos_filled)
}
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- full_join(sim_my_drafted, slice(pick_values,1))
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
if(is.null(my_drafted)){all_drafted <- sim_my_drafted
} else{all_drafted <- full_join(my_drafted, sim_my_drafted, by='Player')}
players_avail  <- players_avail %>% filter(!Player %in% all_drafted$Player)
pos_filled     <- get_pos_filled(all_drafted)
if(!is.null(pos_filled)){
players_avail <- players_avail %>% filter(!Pos %in% pos_filled)
}
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- full_join(sim_my_drafted, slice(pick_values,1))
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
length(my_picks_remain)
length(my_picks_remain) > 0
sim_my_draft <- function(projections, my_picks_remain){
# Initialize variables and select first choice
my_picks_remain <- get_picks_remain(MY_PICKS, my_drafted)
players_avail <- get_players_avail(projections, my_drafted, others_drafted)
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- slice(pick_values, 1)
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
# Draft rest of round
while (length(my_picks_remain) > 0){
if(is.null(my_drafted)){all_drafted <- sim_my_drafted
} else{all_drafted <- full_join(my_drafted, sim_my_drafted, by='Player')}
players_avail  <- players_avail %>% filter(!Player %in% all_drafted$Player)
pos_filled     <- get_pos_filled(all_drafted)
if(!is.null(pos_filled)){
players_avail <- players_avail %>% filter(!Pos %in% pos_filled)
}
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- full_join(sim_my_drafted, slice(pick_values,1))
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
}
print(arrange(sim_my_drafted, pick))
}
sim_my_draft(projections, my_picks_remain)
others_drafted <- slice(projections, 21)
View(others_drafted)
set_envir <- function(){
library(data.table)
library(dplyr)
}
set_envir()
load_projections <- function(){
cols <- c('Player', 'Pos', 'Points', 'Floor', 'Ceiling', 'ADP')
ffa <- fread("/Users/nickvarberg/Downloads/FFA_projections - Sheet1.csv", col.names=cols)
# Create draft position DP variable
ffa <- ffa %>% arrange(ADP) %>% tibble::rowid_to_column("DP")
ffa <- ffa %>% group_by(Pos) %>% arrange(DP) %>%
mutate(posrank=order(DP)) %>% ungroup()
}
ffa <- load_projections()
draft_attributes <- function(){
#Attributes of snake draft
positions        <- c(2, 3, 3, 1)
names(positions) <- c('QB', 'RB', 'WR', 'TE')
assign('positions', positions, envir=.GlobalEnv)
assign('PICKS_PER_ROUND', 8, envir=.GlobalEnv)
assign('MY_PICKS', c(3,14,19,30,35,46,51,62,67), envir=.GlobalEnv)
}
draft_attributes()
calculate_parp <- function(projections){
# My last pick is the replacement level pick
REPL_PICK        <- tail(MY_PICKS,1)
# Replaceent points are max points you could get at that position in the last round
RB_REPL_POINTS <- max(filter(ffa, Pos=='RB' & DP >= REPL_PICK)$Points)
QB_REPL_POINTS <- max(filter(ffa, Pos=='QB' & DP >= REPL_PICK)$Points)
WR_REPL_POINTS <- max(filter(ffa, Pos=='WR' & DP >= REPL_PICK)$Points)
TE_REPL_POINTS <- max(filter(ffa, Pos=='TE' & DP >= REPL_PICK)$Points)
projections    <- mutate(ffa, points_arp = ifelse(Pos=='RB', Points-RB_REPL_POINTS,
ifelse(Pos=='QB', Points-QB_REPL_POINTS,
ifelse(Pos=='WR', Points-WR_REPL_POINTS,
ifelse(Pos=='TE', Points-TE_REPL_POINTS, 0)
))))
return(projections)
}
projections <- calculate_parp(ffa)
my_drafted <- NULL
others_drafted <- slice(projections, 21)
get_picks_remain <- function(my_picks, my_drafted){
if(is.null(my_drafted)){ return(my_picks)
} else{ return(setdiff(my_picks, my_drafted$pick))}
}
get_players_avail <- function(projections, my_drafted, others_drafted){
if(is.null(my_drafted)){ players_avail <- projections
} else{
players_avail <- projections %>% filter(!Player %in% my_drafted$Player)
}
if(is.null(others_drafted)){ players_avail <- players_avail
} else{
players_avail <- players_avail %>% filter(!Player %in% others_drafted$Player)
}
}
get_pick_values <- function(players_avail, my_picks_remain){
for (pick in my_picks_remain){
# Filter to plyers in the next 2 rounds after pick
df <- players_avail %>%
filter(DP>=pick & DP <= pick+2*PICKS_PER_ROUND) %>%
group_by(Pos) %>%
filter(points_arp == max(points_arp)) %>%
mutate(pick = pick) %>%
arrange(desc(points_arp)) %>%
ungroup() %>%
mutate(value = (points_arp - round(mean(points_arp),2))) %>%
select('pick', 'Player', 'Pos', 'Points', 'points_arp', 'DP', 'value')
if (pick == my_picks_remain[1]){
pick_values <- df
}
else{
pick_values <- full_join(pick_values, df)
}
}
return(arrange(pick_values, desc(value)))
}
get_pos_filled <- function(all_drafted){
df             <- all_drafted %>% group_by(Pos) %>% summarise(n = n())
num_pos        <- df %>% pull(n)
names(num_pos) <- df %>% pull(Pos)
pos_filled     <- c()
for (pos in names(num_pos)){
if (num_pos[pos] == positions[pos]){
pos_filled <- c(pos_filled, pos)
}
}
return(pos_filled)
}
sim_my_draft <- function(projections, my_picks_remain){
# Initialize variables and select first choice
my_picks_remain <- get_picks_remain(MY_PICKS, my_drafted)
players_avail <- get_players_avail(projections, my_drafted, others_drafted)
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- slice(pick_values, 1)
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
# Draft rest of round
while (length(my_picks_remain) > 0){
if(is.null(my_drafted)){all_drafted <- sim_my_drafted
} else{all_drafted <- full_join(my_drafted, sim_my_drafted, by='Player')}
players_avail  <- players_avail %>% filter(!Player %in% all_drafted$Player)
pos_filled     <- get_pos_filled(all_drafted)
if(!is.null(pos_filled)){
players_avail <- players_avail %>% filter(!Pos %in% pos_filled)
}
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- full_join(sim_my_drafted, slice(pick_values,1))
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
}
print(arrange(sim_my_drafted, pick))
}
sim_my_draft(projections, my_picks_remain)
my_drafted <- slice(projections, 2)
my_drafted <- slice(projections, 4)
others_drafted <- slice(projections, 21)
sim_my_draft <- function(projections, my_picks_remain){
# Initialize variables and select first choice
my_picks_remain <- get_picks_remain(MY_PICKS, my_drafted)
players_avail <- get_players_avail(projections, my_drafted, others_drafted)
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- slice(pick_values, 1)
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
# Draft rest of round
while (length(my_picks_remain) > 0){
if(is.null(my_drafted)){all_drafted <- sim_my_drafted
} else{all_drafted <- full_join(my_drafted, sim_my_drafted, by='Player')}
players_avail  <- players_avail %>% filter(!Player %in% all_drafted$Player)
pos_filled     <- get_pos_filled(all_drafted)
if(!is.null(pos_filled)){
players_avail <- players_avail %>% filter(!Pos %in% pos_filled)
}
pick_values <- get_pick_values(players_avail, my_picks_remain)
sim_my_drafted <- full_join(sim_my_drafted, slice(pick_values,1))
my_picks_remain <- get_picks_remain(my_picks_remain, sim_my_drafted)
}
print(arrange(sim_my_drafted, pick))
}
sim_my_draft(projections, my_picks_remain)
sim_my_draft(projections, my_picks_remain)
install.packages('shiny')
runExample('01_Hello')
library('shiny')
runExample('01_Hello')
runApp("FF_Algo_Shiny")
runApp("FF_Draft_Algo_Shiny")
runApp("FF_Draft_Algo_Shiny")
runApp("FF_Draft_Algo_Shiny")
runApp('Desktop/Life/Fantasy-Football/FF_Draft_Algo_Shiny')
runApp('Desktop/Life/Fantasy-Football/FF_Draft_Algo_Shiny')
install.packages("rvest")
libraries("rvest")
install.packages("jsonlite")
libraries("jsonlite")
install.packages("jsonlite")
library("rvest")
library("jsonlite")
src <- "https://en.wikipedia.org/wiki/List_of_largest_employers_in_the_United_States"
page <- read_html(src)
src <- "https://en.wikipedia.org/wiki/List_of_largest_employers_in_the_United_States"
page <- read_html(src)
employers <- page %>%
html_nodes("table") %>%
.[1] %>%
html_table()
employers <- employers[[1]]
View(employers)
src <- "https://fantasy.espn.com/football/team?leagueId=200140&teamId=8&seasonId=2018"
page <- read_html(src)
roster <- page %>%
html_nodes("table") %>%
.[1] %>%
html_table()
library(tidyverse)
library(stringr)
library(httr)
library(jsonlite)
library(knitr)
library(DT)
url <- 'https://fantasy.espn.com/football/team?leagueId=1086928&seasonId=2018&teamId=1'
raw.result <- GET(url = url)
this.raw.content <- rawToChar(raw.result$content)
this.content <- fromJSON(this.raw.content)
url <- 'http://games.espn.com/ffl/api/v2/leagueSettings?leagueId=1314476&seasonId=2017'
raw.result <- GET(url = url)
this.raw.content <- rawToChar(raw.result$content)
this.content <- fromJSON(this.raw.content)
library(jsonlite)
library(httr)
this.content <- fromJSON(this.raw.content)
readLines
text <- readLines(curl(url))
install.packages(curl)
install.packages('curl')
install.packages("curl")
library('curl')
text <- readLines(curl(url))
mydata <- fromJSON(readLines(text), flatten = TRUE)$dokumentstatus
fromJSON
library(tidyverse)
library(stringr)
library(httr)
library(jsonlite)
library(knitr)
library(DT)
library('curl')
url <- 'http://games.espn.com/ffl/api/v2/leagueSettings?leagueId=1314476&seasonId=2017'
text <- readLines(curl(url))
mydata <- fromJSON(readLines(url), flatten = TRUE)$dokumentstatus
mydata <- fromJSON(readLines(curl(url)), flatten = TRUE)$dokumentstatus
packageVersion(jsonlite)
packageVersion('jsonlite')
devtools::install_github("jeroen/jsonlite")
mydata <- fromJSON(readLines(curl(url)), flatten = TRUE)$dokumentstatus
library(tidyverse)
library(stringr)
library(httr)
library(jsonlite)
library(knitr)
library(DT)
url <- 'http://games.espn.com/ffl/api/v2/leagueSettings?leagueId=1314476&seasonId=2017'
library('curl')
mydata <- fromJSON(readLines(curl(url)), flatten = TRUE)$dokumentstatus
fromJSON?
as
library(jsonlite)
install.packages('jsonlite')
install.packages("jsonlite")
library(jsonlite)
library('curl')
url <- 'http://games.espn.com/ffl/api/v2/leagueSettings?leagueId=1314476&seasonId=2017'
mydata <- fromJSON(readLines(curl(url)), flatten = TRUE)$dokumentstatus
url <- 'https://fantasy.espn.com/football/team?leagueId=200140&teamId=8&seasonId=2019'
mydata <- fromJSON(readLines(curl(url)), flatten = TRUE)$dokumentstatus
url = 'https://fantasy.espn.com/football/team?leagueId=200140&teamId=8&seasonId=2018'
mydata <- fromJSON(readLines(curl(url)), flatten = TRUE)$dokumentstatus
url = 'https://fantasy.espn.com/apis/v3/games/ffl/leagueHistory/200140?seasonId=2018'
mydata <- fromJSON(readLines(curl(url)), flatten = TRUE)$dokumentstatus
url = 'https://fantasy.espn.com/apis/v3/games/ffl/leagueHistory/2018?seasonId=200140'
mydata <- fromJSON(readLines(curl(url)), flatten = TRUE)$dokumentstatus
url = 'https://fantasy.espn.com/apis/v3/games/ffl/leagueHistory/2018?seasonId=1086928'
mydata <- fromJSON(readLines(curl(url)), flatten = TRUE)$dokumentstatus
raw.result <- GET(url = url)
library(tidyverse)
library(stringr)
library(httr)
library(jsonlite)
library(knitr)
library(DT)
url = 'https://fantasy.espn.com/apis/v3/games/ffl/leagueHistory/2018?seasonId=1086928'
raw.result <- GET(url = url)
this.raw.content <- rawToChar(raw.result$content)
this.content <- fromJSON(this.raw.content)
shiny::runApp('Desktop/Life/Fantasy-Football/FF_Draft_Algo_Shiny')
runExample("02_text")
runExample("03_reactivity")
runExample("04_mpg")
runExample("06_tabsets")
runExample("07_widgets")
runExample("08_html")
runExample("05_sliders")
runExample("04_mpg")
runApp('Desktop/Life/Fantasy-Football/FF_Draft_Algo_Shiny')
